using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Microsoft.OpenApi.Any;
using Microsoft.OpenApi.Models;
using SimpleOidcOauth.Data.Serialization;
using SimpleOidcOauth.Extensions;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace SimpleOidcOauth.OpenApi.Swagger.Filters
{
	/// <summary>A filter to enhance OpenAPI documentation for the <see cref="ValidationProblemDetails"/> class' schema.</summary>
	/// <remarks>
	///     Since we do not have direct access to the <see cref="ValidationProblemDetails"/> class' code, this filter is
	///     registered as a global filter. It ignores all classes, except for <see cref="ValidationProblemDetails"/>.
	/// </remarks>
	public class ValidationProblemDetailsFilter : ISchemaFilter
	{
		// INTERFACE IMPLEMENTATION: ISchemaFilter
		/// <inheritdoc/>
		public void Apply(OpenApiSchema schema, SchemaFilterContext context)
		{
			// This filter works for ValidationProblemDetails only
			if (context.Type != typeof(ValidationProblemDetails))
				return;


			// Add an external docs reference to the RFC 7807 (for tools that can use this information)
			schema.ExternalDocs = new OpenApiExternalDocs {
				Description = "RFC 7807: Problem Details for HTTP APIs",
				Url = new Uri("https://tools.ietf.org/html/rfc7807"),
			};


			// Add examples and descriptions for the fields "type", "title", "status", "detail", and "instance"
			var propType = schema.GetPropertySchemaByCaseInsensitiveName(nameof(ValidationProblemDetails.Type));
			propType.Example = new OpenApiString("https://tools.ietf.org/html/rfc7231#section-6.5.1");
			propType.Description = "From RFC 7807: a URI reference [RFC3986] that identifies the problem type.";

			var propTitle = schema.GetPropertySchemaByCaseInsensitiveName(nameof(ValidationProblemDetails.Title));
			propTitle.Example = new OpenApiString("One or more validation errors occurred.");
			propTitle.Description = "From RFC 7807: a short, human-readable summary of the problem type.";

			var propStatus = schema.GetPropertySchemaByCaseInsensitiveName(nameof(ValidationProblemDetails.Status));
			propStatus.Example = new OpenApiInteger(400);
			propStatus.Description = "From RFC 7807: the HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.";

			var propDetail = schema.GetPropertySchemaByCaseInsensitiveName(nameof(ValidationProblemDetails.Detail));
			propDetail.Example = new OpenApiString("The request contains invalid data. Please, verify the data for errors before retrying the request.");
			propDetail.Description = "From RFC 7807: a human-readable explanation specific to this occurrence of the problem.";

			var propInstance = schema.GetPropertySchemaByCaseInsensitiveName(nameof(ValidationProblemDetails.Instance));
			propInstance.Example = new OpenApiString("/errors/9452");
			propInstance.Description = "From RFC 7807: a URI reference that identifies the specific occurrence of the problem.";


			// Add examples of returned errors (using the SerializableClient class as an example)
			var propErrors = schema.GetPropertySchemaByCaseInsensitiveName(nameof(ValidationProblemDetails.Errors));
			propErrors.Description = "An object whose keys are the fields with errors, and where each value is an array of error messages associated to each field.";
			propErrors.AdditionalProperties = null;
			propErrors.Example = new OpenApiObject {
				[nameof(SerializableClient.ClientName)] = new OpenApiArray {
					new OpenApiString("This field is required."),
				},
				[nameof(SerializableClient.AllowedGrantTypes)] = new OpenApiArray {
					new OpenApiString("Invalid grant type: foo"),
					new OpenApiString("Invalid grant type: bar"),
					new OpenApiString("Invalid grant type: baz"),
				}
			};
		}
	}
}