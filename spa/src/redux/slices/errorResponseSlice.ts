import { Action, createSlice, PayloadAction } from "@reduxjs/toolkit";


/** A type based on ASP.NET Core's ValidationProblemDetails type. The ValidationProblemDetails type is
 * compliant with RFC 7807 ("Problem Details for HTTP APIs") for representing errors returned by web APIs in a
 * standard way. It also extends RFC 7807 to include some custom information on validation errors for fields. */
export type ValidationProblemDetails = {
	/** A human-readable explanation specific to this occurrence of the problem. */
	detail?: string;
	/** A URI reference that identifies the specific occurrence of the problem.
	 * It may or may not yield further information if dereferenced. */
	instance?: string;
	/** The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. */
	status: number;
	/** A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem,
	 * except for purposes of localization (e.g., using proactive content negotiation - see[RFC7231], Section 3.4). */
	title?: string;
	/** A URI reference (RFC 3986) that identifies the problem type. The specification encourages that, when dereferenced, it provide
	 * human-readable documentation for the problem type. When this member is not present, its value is assumed to
	 * be "about:blank". */
	type?: string;
	/** An object which holds information about the errors associated to each error key.
	 * A key is usually associated with the name of a form's input field, or it might be a meaningful/well-known key that can be returned
	 * by the back end server. */
	errors?: {
		/** Each error key is mapped to an array containing error descriptions associated to that specific key. */
		[key: string]: string[];
	}
};


/** Redux Slice representing the last error(s) returned after performing API call. */
const errorResponseSlice = createSlice({
	name: "errorResponse",
	initialState: null as (ValidationProblemDetails|null),
	reducers: {
		/**  Updates the data about the last error which ocurred during an API call.
		 * @param state The current error data.
		 * @param action
		 *     The action which caused the update on the Redux Store's state.
		 *     This action should contain a payload with the new error data. */
		setError(state, action: PayloadAction<ValidationProblemDetails>) {
			return action.payload;
		},


		/** Clears any previous errors which have ocurred during previous API calls.
		 * @param state The current error data.
		 * @param action The action which caused the update on the Redux Store's state. */
		clearError(state, action: Action) {
			return null;
		}
	}
});


export default errorResponseSlice;